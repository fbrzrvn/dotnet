version: '3.9'

services:
  mysql:
    container_name: mysql
    image: 'mysql:latest'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    environment:
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
      test:
        [
          'CMD',
          '/usr/bin/mysql',
          '--user=root',
          '--password=password',
          '--host=localhost',
          --execute=SHOW TABLES;,
          'sys',
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      local-network:
        aliases:
          - mysql

  zookeeper:
    container_name: zookeeper
    image: 'confluentinc/cp-zookeeper:latest'
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      local-network:
        aliases:
          - zookeeper

  kafka:
    container_name: kafka
    image: 'confluentinc/cp-kafka:latest'
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ['CMD', 'kafka-topics','--bootstrap-server', 'kafka:9092', '--list']
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      local-network:
        aliases:
          -  kafka

  kafdrop:
    container_name: kafdrop
    image: 'obsidiandynamics/kafdrop:latest'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:29092'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      local-network:
        aliases:
          - kafdrop

  identity-api:
    container_name: identity-api
    image: ${DOCKER_REGISTRY-}identity-api
    build:
      context: .
      dockerfile: Identity/src/Identity.Api/Dockerfile
    ports:
      - '8080:80'
    expose:
      - '80'
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      local-network:
        aliases:
          - identity-api

networks:
  local-network:
    name: local-network-bridge
    driver: bridge
    ipam:
      driver: default
